namespace core::io;

pub type File {
    pub CFile #FILE*;

    pub static fn init(cfile #FILE*) #File {
        self.CFile = cfile;
        ret self
    }

    pub fn Flush() {
        fflush(self.CFile);
        ret
    }

    pub fn Write(string #u8*) {
        fputs(string, self.CFile);
        ret
    }

    pub fn Write(char #u8) {
        fputc(char, self.CFile);
        ret
    }

    pub fn Write(string #u8*, end #u8) {
        self.Write(string);
        self.Write(end);
        ret
    }

    pub fn WriteLine(string #u8*) {
        self.Write(string, '\n');
        ret
    }

    pub fn GetChar() #u8 {
        var ch #i32 = fgetc(self.CFile);

        if !EOF(ch) {
            ret #u8(ch)
        } else {
            ret '\0'
        }
    }

    pub fn ReadLine() #u8* {
        var size #u32 = 512;
        var string #u8* = #u8*(malloc(size));
        var ch #u8;
        var len #u32 = 0;

        if string == null {
            ret string
        }

        while (ch = self.GetChar()) != '\0' and ch != '\n' {
            string[len] = ch;
            ++len;
            
            if len >= size {
                string = #u8*(realloc(#void*(string), size += 512));

                if string == null {
                    ret string
                }
            }
        }

        string[++len] = '\0';
        string = #u8*(realloc(#void*(string), ++len));
        ret string
    }
}